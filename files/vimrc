""" vimrc
" Run any command styled [cmd] by pressing Control+E.
" [so $MYVIMRC | nohlsearch] [Gstatus] [Gdiff]
nnoremap <C-e> "cyi[<CR>:@c<CR>

set nocompatible               " be iMproved
filetype off                   " required!

"" Plug plugins
" [PlugInstall] [PlugClean]
call plug#begin('~/.vim/plugged')
" Plugin plugins
Plug 'tpope/vim-repeat'

" Layout
Plug 'vim-scripts/Zenburn'
Plug 'bling/vim-airline'

" Files
Plug 'ctrlpvim/ctrlp.vim'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

" SVC
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" Editing
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --clang-completer' }
Plug 'Raimondi/delimitMate'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'AndrewRadev/sideways.vim'
Plug 'tmhedberg/SimpylFold'

" Language-specific
Plug 'nvie/vim-flake8'
Plug 'kchmck/vim-coffee-script'

" Utility
Plug 'pthrasher/conqueterm-vim'
Plug 'vim-scripts/Gundo'
Plug 'tmhedberg/matchit'
Plug 'vim-scripts/taglist.vim'          " Source code browser
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'rking/ag.vim'
Plug 'terryma/vim-multiple-cursors'
call plug#end()


"" Some basic configuration
filetype plugin indent on
set encoding=utf-8
syntax on
set t_Co=256
colorscheme zenburn

"" Functional settings
set hidden         " Hide buffers, don't close them.
set number         " Line numbers plz.
set showmatch      " Matching parenthesis.
set backspace=eol,start " Backspace!
set title          " Window title overwrite.
set wildignore=*.swp,*.bak,*.pyc,*.class
                   " Ignore stupid files.
set scrolloff=3    " Show three lines below the cursor.
set ttyfast
set showcmd
set cursorline     " Highlight current line

"" Grouped settings
" Visible whitespace characters
set list
set listchars=tab:»\ ,trail:·,extends:…,eol:¶
set showbreak=↪

" Prettier and better splits, folds.
set fillchars=vert:\│,fold:―
set splitright
set splitbelow

" Less annoyances
set visualbell
set noerrorbells

" Enable the mouse!
set mouse=a
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end

if v:version >= 703
  " Colored area after 80th character
  hi ColorColumn ctermbg=238
  let &colorcolumn=join(range(81,999),",")
endif

" Better history/undo
set history=1000
set undolevels=1000

" No mess
set nobackup
set noswapfile

" Better indentation
set expandtab
set tabstop=4
set autoindent
set copyindent
set shiftwidth=4
set smarttab
set shiftround

" Better searching
set ignorecase
set smartcase
set hlsearch
set incsearch

" Folding is cool
set foldmethod=syntax
au BufRead * normal zR

"" (Re)maps
" Who needs Ex mode?
nnoremap Q <nop>

" , is a better leader than \
let mapleader=","

" Pasting? Press F2 first!
set pastetoggle=<F2>

" But Ctrl+Arrow switches between buffers!
nnoremap <silent> <C-k> :new<CR>
nnoremap <silent> <C-j> :bp<bar>sp<bar>bn<bar>bd<CR>
nnoremap <silent> <C-l> :bp<CR>
nnoremap <silent> <C-h> :bn<CR>

" Clear searches with ,/
nmap <silent> <leader>/ :nohlsearch<CR>

" ,ev and ,sv to edit and reload .vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>evd :e ~/dotfiles/files/vimrc<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR><leader>/

" Space should open or create a fold
nnoremap <space> za
vnoremap <space> zf

" Reselect visual block after indent/outdent.
vnoremap < <gv
vnoremap > >gv

"" Plugins
" Airline
set laststatus=2
let g:airline_theme="hybridline"
" Disable fancy symbols by default.
"let g:Powerline_symbols = 'fancy'

" GitGutter
highlight clear SignColumn

" MiniBufExpl
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

" NERDTree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$']

" Jedi
let g:jedi#use_tabs_not_buffers = 0

" vim-flake8
autocmd BufWritePost *.py call Flake8()
let g:flake8_show_in_gutter = 1
let g:flake8_show_in_file = 1

" CtrlP
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

" CtrlP perfomance improvements are awesome
let g:ctrlp_match_func = {'match': 'pymatcher#PyMatch'}
let g:ctrlp_clear_cache_on_exit = 0
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --ignore ''.git'' --ignore ''.DS_Store'' --ignore ''node_modules'' --hidden -g ""'
endif

" Gundo
map U :GundoToggle<CR>

" YCM
let g:ycm_path_to_python_interpreter = '/usr/bin/python'
let g:ycm_key_list_previous_completion=['<Up>']
let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
let g:ycm_complete_in_comments = 1 " Completion in comments
let g:ycm_complete_in_strings = 1 " Completion in string"

" Snippets
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Multiple cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-a>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Sideways
nnoremap <leader>< :SidewaysLeft<cr>
nnoremap <leader>> :SidewaysRight<cr>

"" Project-specific vimrc files
set exrc
set secure
